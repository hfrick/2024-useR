---
title: "tidymodels -- Now also for time-to-event data!"
subtitle: "useR! 2024"
author: "Hannah Frick, Posit"
format:
  revealjs: 
    slide-number: false
    show-slide-number: all
    footer: <https://hfrick.github.io/2024-useR>
    theme: [default, style.scss]
    css: styles.css
    highlight-style: a11y
    width: 1280
    height: 720
knitr:
  opts_chunk: 
    echo: true
    collapse: true
    comment: "#>"
---

```{r setup}
#| echo: false
#| message: false
#| warning: false
library(tidymodels)
library(censored)

options(width = 70)

theme_set(theme_minimal(base_size = 20))
```

# Time-to-event data?

## What is time-to-event data? {visibility="hidden"}

- event: so many possibilities

- time: usually indeed time 

- no event: censored (not missing)

## Customer churn

```{r}
#| eval: false
wa_churn
```

```{r}
#| echo: false
data("wa_churn", package = "modeldata")

wa_churn <- wa_churn %>%
  drop_na() %>%
  mutate(
    multiple_lines = if_else(multiple_lines == "No phone service", "No", multiple_lines),
    across(all_of(c("online_security", "online_backup",
                    "device_protection", "tech_support", "streaming_tv", 
                    "streaming_movies")), 
           ~ if_else(.x == "No internet service", "No", .x))
  ) %>% 
  select(-contract, -total_charges) %>%
  relocate(tenure, churn)

print(wa_churn, n = 6)
```


## What might you want to model with these data?

Let's try to predict:

. . .

- How long is somebody going to stay as a customer?

. . .

- Who is likely to stop being a customer?


# How long is somebody going to stay as a customer?

## What if we just use the time?

<br>

```{r}
#| echo: false
#| fig-align: "center"
#| out.height: 80%

knitr::include_graphics("images/time-only.png")
```

. . . 

That time is **observation time**, not **time to event**.

## What we actually have

<br>

```{r}
#| echo: false
#| fig-align: "center"
#| out.height: 80%

knitr::include_graphics("images/time-to-event-with-censoring-legend.png")
```

## What if we just use the time?

<br>

```{r}
#| echo: false
#| fig-align: "center"
#| out.height: 80%

knitr::include_graphics("images/time-to-event-only-legend.png")
```

If we assume that's time-to-event, **we assume everything is an event**.

::: {.notes}
- using censored obs as events underestimates the survival time
:::

## What if we only use the event time?

<br>

```{r}
#| echo: false
#| fig-align: "center"
#| out.height: 80%

knitr::include_graphics("images/discard-censored.png")
```

::: {.notes}
- discarding censored obs also biases the results
- wait until we observe everything? not always possible (dropout of study)
:::

# Who is likely to stop being a customer?

## What if we just use the event status?

<br>

```{r}
#| echo: false
#| fig-align: "center"
#| out.height: 80%

knitr::include_graphics("images/event-only.png")
```

. . .

Who is likely to stop being a customer _while we observe them?_

## Our challenge

- Time-to-event data inherently has two aspects: time and event status.
- Censoring: incomplete data is not missing data.

. . .

- With regression and classification we can only model one aspect, separately, without being able to properly account for the other aspect.

:::{.notes}
- all models are wrong etc
- not scolding but inviting to use methods tailored to this problem
:::

## Survival analysis to the rescue

<br><br>

> Survival analysis is unique because it simultaneously considers _if_ events happened (i.e. a binary outcome) and _when_ events happened (e.g. a continuous outcome).[^1]

[^1]: Denfeld QE, Burger D, Lee CS (2023) _Survival analysis 101: an easy start guide to analysing time-to-event data_. European Journal of Cardiovascular Nursing, Volume 22, Issue 3, Pages 332â€“337, <https://doi.org/10.1093/eurjcn/zvad023>



# tidymodels?

---

<br><br><br>

::: {.r-fit-text}
tidymodels is a framework for modelling and 

machine learning using tidyverse principles.
:::


## Core coverage

. . .

<!-- left to right, one right next to each other: increase "left" by 150 -- which is the width of the image -->

![](images/hex/rsample.png){.absolute top="200" left="50" width="150"} 

. . .

![](images/hex/recipes.png){.absolute top="200" left="300" width="150"} 

. . .

![](images/hex/parsnip.png){.absolute top="200" left="550" width="150"} 

. . .

![](images/hex/yardstick.png){.absolute top="200" left="800" width="150"} 

. . .

![](images/hex/tune.png){.absolute top="200" left="1050" width="150"} 



## Extendable

![](images/hex/rsample.png){.absolute top="200" left="50" width="150"} 
![](images/hex/recipes.png){.absolute top="200" left="300" width="150"} 
![](images/hex/parsnip.png){.absolute top="200" left="550" width="150"} 
![](images/hex/yardstick.png){.absolute top="200" left="800" width="150"} 
![](images/hex/tune.png){.absolute top="200" left="1050" width="150"} 

. . .

<!-- + 133 down and + 76 to the left -->
![](images/hex/spatialsample.png){.absolute top="333" left="126" width="150"} 

<!-- . . . -->

![](images/hex/waywiser.png){.absolute top="333" left="876" width="150"} 

. . .

![](images/hex/finetune.png){.absolute top="333" left="1126" width="150"} 

. . .

![](images/hex/textrecipes.png){.absolute top="333" left="376" width="150"} 
![](images/hex/embed.png){.absolute top="466" left="452" width="150"} 
![](images/hex/themis.png){.absolute top="67" left="224" width="150"} 

. . .

![](images/hex/agua.svg){.absolute top="-66" left="398" width="150"} 
![](images/hex/bonsai.png){.absolute top="-66" left="550" width="150"} 
![](images/hex/poissonreg.png){.absolute top="-66" left="702" width="150"} 
![](images/hex/rules.png){.absolute top="67" left="474" width="150"} 
![](images/hex/multilevelmod.png){.absolute top="67" left="626" width="150"} 
![](images/hex/censored.png){.absolute top="333" left="626" width="150"} 
![](images/hex/baguette.png){.absolute top="466" left="702" width="150"} 
![](images/hex/discrim.png){.absolute top="599" left="778" width="150"} 

---

<br><br><br>

::: {.r-fit-text}
Focus on the modelling question,  

  not the infrastructure for  
  empirical validation.
:::

---

<br><br><br>

::: {.r-fit-text}
Focus on the modelling question,  

  not the syntax.
:::

::: {.notes}
- unify: switch easily between models
- consistency: 
- composable functions support chunking
  - object (a recipe) to hold all preprocessing, apply it in various places
:::

## tidymodels for survival analysis

- [Models](https://censored.tidymodels.org/#available-models-engines-and-prediction-types):  
  parametric, semi-parametric, and tree-based
- [Predictions](https://censored.tidymodels.org/#available-models-engines-and-prediction-types):  
  survival time, survival probability, hazard, and linear predictor
- [Metrics](https://yardstick.tidymodels.org/reference/index.html#dynamic-survival-metrics):  
  concordance index, Brier score, integrated Brier score, AUC ROC

## tidymodels for survival analysis

<br>

![](images/hex/tidymodels.png){fig-align="center" height="400"}

# Show me some code!

## Customer churn

```{r}
library(tidymodels)
library(censored)

telco_churn <- wa_churn %>% 
  mutate(
    churn_surv = Surv(tenure, if_else(churn == "Yes", 1, 0)),
    .keep = "unused"
  )
```

::: {.notes}
- Surv = response
- modify response outside of recipes
:::

## Split the data

```{r}
#| code-line-numbers: "1-2|4-5"
set.seed(403)
telco_split <- initial_split(telco_churn)

telco_train <- training(telco_split)
telco_test <- testing(telco_split)
```

## A single model

```{r}
#| code-line-numbers: "1-2|4-6|8-10|12"
telco_rec <- recipe(churn_surv ~ ., data = telco_train) %>% 
  step_zv(all_predictors()) 

telco_spec <- survival_reg() %>%
  set_mode("censored regression") %>%
  set_engine("survival")

telco_wflow <- workflow() %>%
  add_recipe(telco_rec) %>%
  add_model(telco_spec)

telco_fit <- fit(telco_wflow, data = telco_train)
```

## How long is somebody going to stay as a customer?

```{r}
predict(telco_fit, new_data = telco_train[1:5, ], type = "time")
```

## Who is likely to stop being a customer?

```{r}
pred_survival <- predict(telco_fit, new_data = telco_train[1:5, ], 
                         type = "survival", eval_time = c(12, 24))

pred_survival
```

## Who is likely to stop being a customer?

```{r}
pred_survival$.pred[[1]]
```

<!-- 
- show survival curves?
- predict censored observations only and filter for their individual eval_time == observed_time?
-->

## tidymodels for time-to-event data

<br>

![](images/hex/tidymodels.png){.absolute top="466" left="902" width="180"} 

Learn more via 

. . .

- Articles on [tidymodels.org/learn](https://www.tidymodels.org/learn/) with the [survival analysis tag](https://www.tidymodels.org/learn/#category=survival%20analysis)

. . .

- The useR! tutorial: [Survival analysis with tidymodels](https://hfrick.github.io/tidymodels-survival-workshop/)

:::{.notes}
including a case study
:::

# {background-color="#CA225E"} {visibility="hidden"}
<center>
[tidymodels.org]{style="font-size:2.5em;"}
</center>